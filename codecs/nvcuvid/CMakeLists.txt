cmake_minimum_required(VERSION 3.5)
project(nvcuvid LANGUAGES CXX)

# On Windows this requires CUDA version 10.1.
# Other platforms are not tested.


################################################################################
# Dependencies

if (WIN32)
    set(CMAKE_FIND_LIBRARY_PREFIXES "")
    set(CMAKE_FIND_LIBRARY_SUFFIXES ".lib")
else()
    set(CMAKE_FIND_LIBRARY_PREFIXES "lib")
    set(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
endif()

# FIXME: Only 64-bit version works
set(LIB_SELECT "x64")

if (WIN32)
    set(NVCUVID_LIB "${CMAKE_CURRENT_LIST_DIR}/vendored/${LIB_SELECT}/nvcuvid.lib")
else()
    find_library(NVCUVID_LIB
        NAMES
            nvcuvid
        NO_CMAKE_SYSTEM_PATH
    )
endif()

# FIXME: Only CUDA v10.1 works
find_library(CUDART_STATIC_LIB
    NAMES
        cudart_static
    HINTS
        "/usr/local/cuda-11.0/lib64}/"
    NO_CMAKE_SYSTEM_PATH
)
find_library(CUDA_LIB
    NAMES
        cuda
    HINTS
        "/usr/local/cuda-11.0/lib64/"
    NO_CMAKE_SYSTEM_PATH
)
find_library(NVJPEG_LIB
    NAMES
        nvjpeg
    HINTS
        "/usr/local/cuda-11.0/lib64/"
    NO_CMAKE_SYSTEM_PATH
)

find_path(CUDA_INCLUDE_DIR cuda.h
    HINTS
        "/usr/local/cuda-11.0/include"
    REQUIRED
)

if (WIN32)
    set(CMAKE_FIND_LIBRARY_PREFIXES "")
    set(CMAKE_FIND_LIBRARY_SUFFIXES ".dll")
else()
    set(CMAKE_FIND_LIBRARY_PREFIXES "lib")
    set(CMAKE_FIND_LIBRARY_SUFFIXES ".so")
endif()

# nvJPEG needs to be vendored because the CUDA Toolkit does not install it
# in a predictable location.
find_library(NVJPEG_DYNLIB
    NAMES
        nvjpeg64_10
    HINTS
        "${CMAKE_CURRENT_LIST_DIR}/vendored/${LIB_SELECT}"
    NO_CMAKE_SYSTEM_PATH
)

message("NVCUVID_LIB: ${NVCUVID_LIB}")
message("CUDART_STATIC_LIB: ${CUDART_STATIC_LIB}")
message("CUDA_LIB: ${CUDA_LIB}")
message("NVJPEG_LIB: ${NVJPEG_LIB}")
message("CUDA_INCLUDE_DIR: ${CUDA_INCLUDE_DIR}")
message("NVJPEG_DYNLIB: ${NVJPEG_DYNLIB}")


################################################################################
# Source

set(INCLUDE_FILES
    include/cuviddec.h
    include/nvcuvid.h
    include/NvDecoder.h
    include/NvEncoder.h
    include/nvEncodeAPI.h
    include/NvEncoderCuda.h
)

set(SOURCE_FILES
    ${INCLUDE_FILES}
    src/NvDecoder.cpp
    src/NvEncoder.cpp
    src/NvEncoderCuda.cpp
)

include_directories(include ${CUDA_INCLUDE_DIR})


################################################################################
# Targets

# nvcuvid library

add_library(nvcuvid STATIC ${SOURCE_FILES})
target_include_directories(nvcuvid PUBLIC include ${CUDA_INCLUDE_DIR})
target_link_libraries(nvcuvid PUBLIC
    ${NVCUVID_LIB}
    ${CUDART_STATIC_LIB}
    ${CUDA_LIB}
    ${NVJPEG_LIB}
)

install(FILES ${INCLUDE_FILES} DESTINATION include)
install(TARGETS nvcuvid DESTINATION lib)
